#!/bin/bash -e
# Title: spm
# Description: Downloads and installs AppImages and precompiled tar archives.  Can also upgrade and remove installed packages.
# Dependencies: GNU coreutils, tar, wget
# Author: simonizor
# Website: http://www.simonizor.gq
# License: GPL v2.0 only

X="0.3.8"
# Set spm version
CONFDIR="$HOME/.config/spm"
SKIP_DEP_CHECKS="FALSE"

if [ "$EUID" = "0" ]; then # Prevent spm from being ran as root
    echo "Do not run spm as root!"
    exit 1
fi

if [ -f ~/.config/simplepackagemanager/spm.conf ]; then
    . ~/.config/simplepackagemanager/spm.conf
elif [ -f ~/.config/spm/spm.conf ]; then
    . ~/.config/spm/spm.conf
fi

if [ ! -d "$CONFDIR" ]; then # Create dirs for configs if they don't exist
    echo "spm is being ran for the first time."
    echo "Creating config directories..."
    mkdir "$CONFDIR"
    case $? in
        1)
            echo "Failed to create $HOME/.config/spm; falling back to $HOME/.config/simplepackagemanager ..."
            CONFDIR="$HOME/.config/simplepackagemanager"
            mkdir "$CONFDIR" || { echo "Why are we still failing here? Something wrong with $HOME/.config ?"; exit 1; }
            ;;
    esac
    mkdir "$CONFDIR"/tarinstalled
    mkdir "$CONFDIR"/appimginstalled
    mkdir "$CONFDIR"/tarupgrades
    mkdir "$CONFDIR"/appimgupgrades
    mkdir "$CONFDIR"/cache
    echo "CONFDIR="\"$CONFDIR\""" > "$CONFDIR"/spm.conf
    echo "GITHUB_TOKEN="\"\""" >> "$CONFDIR"/spm.conf
    echo "SKIP_DEP_CHECKS="\"FALSE\""" >> "$CONFDIR"/spm.conf
    echo "Downloading AppImages-github.lst from spm github..."
    wget --quiet "https://raw.githubusercontent.com/simoniz0r/spm/master/AppImages-github.lst" -O "$CONFDIR"/AppImages-github.lst
    echo "Downloading AppImages-direct.lst from spm github..."
    wget --quiet "https://raw.githubusercontent.com/simoniz0r/spm/master/AppImages-direct.lst" -O "$CONFDIR"/AppImages-direct.lst
    echo "Downloading tar-pkgs.json from spm github repo..."
    wget --quiet "https://raw.githubusercontent.com/simoniz0r/spm/master/tar-pkgs.json" -O "$CONFDIR"/tar-pkgs.json
    echo "First run operations complete!"
fi

REALPATH="$(readlink -f $0)"
RUNNING_DIR="$(dirname "$REALPATH")" # Find directory script is running from
if [ -f $RUNNING_DIR/spmfunctions.sh ]; then
    FUNCTIONS_VER="$(cat "$RUNNING_DIR"/spmfunctions.sh | sed -n 9p | cut -f2 -d'"')"
    if [ "$X" != "$FUNCTIONS_VER" ]; then
        echo "spmfunctions.sh $FUNCTIONS_VER version does not match $X !"
        echo "spmfunctions.sh is out of date! Please download the full release of spm from https://github.com/simoniz0r/spm/releases !"
        exit 1
    fi
else
    echo "Missing required file $RUNNING_DIR/spmfunctions.sh !"
        echo "spmfunctions.sh is missing! Please download the full release of spm from https://github.com/simoniz0r/spm/releases !"
        exit 1
fi
source "$RUNNING_DIR"/spmfunctions.sh # import functions from spmfunctions.sh

spmdepchecksfunc || { echo "Could not load $RUNNING_DIR/spmfunctions.sh; exiting..."; exit 1; } # Check for deps, exit if not present

if type spm >/dev/null 2>&1 && [ -f ~/.zshrc ] && ! grep -q 'spm.comp' ~/.zshrc; then # If using zsh and spm is installed, add tab completions for spm
    wget --quiet "https://raw.githubusercontent.com/simoniz0r/spm/master/spm.comp" -O "$CONFDIR"/spm.comp
    echo "" >> ~/.zshrc
    echo "if [ -f "$CONFDIR"/spm.comp ]; then" >> ~/.zshrc
    echo "    source "$CONFDIR"/spm.comp" >> ~/.zshrc
    echo "    compdef _spm spm" >> ~/.zshrc
    echo "fi" >> ~/.zshrc
    echo "" >> ~/.zshrc
fi

appimgfunctioncheckfunc # Check if appimgfunctions.sh exists, check version if it does, download if out of date or doesn't
source "$RUNNING_DIR"/appimgfunctions.sh # import functions from appimgfunctions.sh
appimgfunctionsexistsfunc  || { echo "Could not load $RUNNING_DIR/appimgfunctions.sh; exiting..."; exit 1; }

tarfunctioncheckfunc # Check if tarfunctions.sh exists, check version if it does, download if out of date or doesn't
source "$RUNNING_DIR"/tarfunctions.sh # import functions from tarfunctions.sh
tarfunctionsexistfunc || { echo "Could not load $RUNNING_DIR/tarfunctions.sh; exiting..."; exit 1; }

spmlockfunc # Create "$CONFDIR"/cache/spm.lock file and prevent multiple instances by checking if it exists before running

if [ -z "$GITHUB_TOKEN" ]; then
    wget -S --spider "https://api.github.com/rate_limit" -o "$CONFDIR"/cache/rate.limit
    echo "Github API rate limit: $(grep -m 1 '.*X-RateLimit-Remaining:*.' "$CONFDIR"/cache/rate.limit | cut -f4 -d" ")/60 until $(date -d@$(grep -m 1 '.*X-RateLimit-Reset:*.' "$CONFDIR"/cache/rate.limit | cut -f4 -d" ") +"%T, %F")."
else
    wget -S --spider --quiet --auth-no-challenge --header="Authorization: token "$GITHUB_TOKEN"" "https://api.github.com/rate_limit" -o "$CONFDIR"/cache/rate.limit
    echo "Github API rate limit : $(grep -m 1 '.*X-RateLimit-Remaining:*.' "$CONFDIR"/cache/rate.limit | cut -f4 -d" ")/5000 until $(date -d@$(grep -m 1 '.*X-RateLimit-Reset:*.' "$CONFDIR"/cache/rate.limit | cut -f4 -d" ") +"%T, %F")."
fi
if [ "$(grep -m 1 '.*X-RateLimit-Remaining:*.' "$CONFDIR"/cache/rate.limit | cut -f4 -d" ")" = "0" ]; then
    echo "Github API rate limit reached! Try again at $(date -d@$(grep -m 1 '.*X-RateLimit-Reset:*.' "$CONFDIR"/cache/rate.limit | cut -f4 -d" "))."
    echo "If you haven't already, you can add your token to $CONFDIR/spm.conf"
    echo "to avoid hitting the rate limit."
    rm -rf "$CONFDIR"/cache/* # Remove any files in cache before exiting
    exit 1
fi
echo

case $1 in
    appimg-install|-ai) # Check if package is already installed either by spm or otherwise then install package
        if [ -z "$2" ]; then
            echo "Package input required; exiting..."
            rm -rf "$CONFDIR"/cache/*
            exit 1
        fi
        INSTIMG="$2"
        appimginstallstartfunc
        appimgdlfunc "$INSTIMG"
        appimginstallfunc
        rm -rf "$CONFDIR"/cache/* # Remove any files in cache before exiting
        exit 0
        ;;
    tarinstall|-ti) # Check if package is already installed either by spm or otherwise then install package
        if [ -z "$2" ]; then
            echo "Package input required; exiting..."
            rm -rf "$CONFDIR"/cache/*
            exit 1
        fi
        TARPKG="$2"
        tarinstallstartfunc
        tardlfunc "$TARPKG"
        tarcheckfunc
        tarinstallfunc
        rm -rf "$CONFDIR"/cache/* # Remove any files in cache before exiting
        exit 0
        ;;
    update|-upd) # Update package lists and check for package upgrades
        spmvercheckfunc
        updatestartfunc "$2" # Send input to relevant update function or run both if no input
        rm -rf "$CONFDIR"/cache/* # Remove any files in cache before exiting
        exit 0
        ;;
    appimg-update-force|-auf) # Force AppImage to be marked for upgrade
        INSTIMG="$2"
        appimgupdateforcefunc
        rm -rf "$CONFDIR"/cache/* # Remove any files in cache before exiting
        exit 0
        ;;
    tar-update-force|-tuf) # Force tar package to be marked for upgrade
        TARPKG="$2"
        tarupdateforcefunc
        rm -rf "$CONFDIR"/cache/* # Remove any files in cache before exiting
        exit 0
        ;;
    upgrade|-upg) # upgrade packages to latest version if marked for upgrade
        upgradestartfunc "$2" # Check which (if any) package types have upgrades and run relevant functions
        rm -rf "$CONFDIR"/cache/* # Remove any files in cache before exiting
        exit 0
        ;;
    appimg-remove|-ar) # rm AppImage from /usr/local/bin and rm install info in "$CONFDIR"/installed
        if [ -z "$2" ]; then
            echo "AppImage input required; exiting..."
            rm -rf "$CONFDIR"/cache/* # Remove any files in cache before exiting
            exit 1
        fi
        REMIMG="$2"
        if [ -f "$CONFDIR"/appimginstalled/"$REMIMG" ]; then
            echo "$(tput bold)Current installed $REMIMG information$(tput sgr0):"
            . "$CONFDIR"/appimginstalled/"$REMIMG"
            echo "$(tput bold)Info$(tput sgr0):  $APPIMAGE_DESCRIPTION"
            if [ -z "$APPIMAGE_NAME" ]; then
                echo "$(tput bold)Name$(tput sgr0):  $APPIMAGE"
            else
                echo "$(tput bold)Name$(tput sgr0):  $APPIMAGE_NAME"
            fi
            echo "$(tput bold)Version$(tput sgr0):  $APPIMAGE_VERSION"
            echo "$(tput bold)URL$(tput sgr0):  $WEBSITE"
            echo "$(tput bold)Install dir$(tput sgr0): $BIN_PATH"
            echo
            else
            echo "AppImage not found!"
            rm -rf "$CONFDIR"/cache/* # Remove any files in cache before exiting
            exit 1
        fi
        appimgremovefunc
        rm -rf "$CONFDIR"/cache/* # Remove any files in cache before exiting
        exit 0
        ;;
    tar-remove|-tr) # Remove: remove pkg while leaving pkg's config files
        if [ -z "$2" ]; then
            echo "Package input required; exiting..."
            rm -rf "$CONFDIR"/cache/*
            exit 1
        fi
        REMPKG="$2"
        if [ -f "$CONFDIR"/tarinstalled/"$REMPKG" ]; then
            echo "$(tput bold)Current installed $REMPKG information$(tput sgr0):"
            . "$CONFDIR"/tarinstalled/"$REMPKG"
            echo "$(tput bold)Info$(tput sgr0):  $TAR_DESCRIPTION"
            echo "$(tput bold)Deps$(tput sgr0):  $DEPENDENCIES"
            if [ -z "$TAR_GITHUB_COMMIT" ]; then
                echo "$(tput bold)Version$(tput sgr0):  $TARFILE"
            else
                echo "$(tput bold)Version$(tput sgr0):  $TAR_GITHUB_COMMIT"
            fi
            echo "$(tput bold)Source$(tput sgr0):  $TAR_DOWNLOAD_SOURCE"
            echo "$(tput bold)URL$(tput sgr0):  $TARURI"
            echo "$(tput bold)Install dir$(tput sgr0):  $INSTDIR"
            echo "$(tput bold)Bin path$(tput sgr0):  $BIN_PATH"
            echo
        else
            echo "Package not found!"
            rm -rf "$CONFDIR"/cache/*
            exit 1
        fi
        tarappcheckfunc "$REMPKG"
        tarremovefunc
        rm -rf "$CONFDIR"/cache/*
        exit 0
        ;;
    tar-remove-purge|-trp) # Remove Purge: remove pkg and also remove pkg's config files
        if [ -z "$2" ]; then
            echo "Package input required; exiting..."
            rm -rf "$CONFDIR"/cache/*
            exit 1
        fi
        PURGEPKG="$2"
        echo "$(tput bold)Current installed $PURGEPKG information$(tput sgr0):"
        if [ -f "$CONFDIR"/tarinstalled/"$PURGEPKG" ]; then
            . "$CONFDIR"/tarinstalled/"$PURGEPKG"
            echo "$(tput bold)Info$(tput sgr0):  $TAR_DESCRIPTION"
            echo "$(tput bold)Deps$(tput sgr0):  $DEPENDENCIES"
            if [ -z "$TAR_GITHUB_COMMIT" ]; then
                echo "$(tput bold)Version$(tput sgr0):  $TARFILE"
            else
                echo "$(tput bold)Version$(tput sgr0):  $TAR_GITHUB_COMMIT"
            fi
            echo "$(tput bold)Source$(tput sgr0):  $TAR_DOWNLOAD_SOURCE"
            echo "$(tput bold)URL$(tput sgr0):  $TARURI"
            echo "$(tput bold)Install dir$(tput sgr0):  $INSTDIR"
            echo "$(tput bold)Bin path$(tput sgr0):  $BIN_PATH"
            echo
        else
            echo "Package not found!"
            rm -rf "$CONFDIR"/cache/*
            exit 1
        fi
        tarappcheckfunc "$PURGEPKG"
        tarremovepurgefunc
        rm -rf "$CONFDIR"/cache/*
        exit 0
        ;;
    list|-l) # List installed packages or info about specified package
        LISTIMG="$2"
        TARPKG="$2"
        liststartfunc # Send package input to relevant list function or run both if no input
        rm -rf "$CONFDIR"/cache/* # Remove any files in cache before exiting
        exit 0
        ;;
    list-installed|-li) # List information about installed packages
        echo "$(tput bold)AppImages$(tput sgr0):"
        echo
        appimglistinstalledfunc
        echo
        echo "$(tput bold)tar packages$(tput sgr0):"
        echo
        tarlistinstalledfunc
        echo "$(tput bold)$(dir -C -w 1 "$CONFDIR"/appimginstalled | wc -l) AppImages installed$(tput sgr0):"
        dir -C -w 1 "$CONFDIR"/appimginstalled | pr -tT --column=3 -w 125
        echo
        echo "$(tput bold)$(dir -C -w 1 "$CONFDIR"/tarinstalled | wc -l) tar packages installed$(tput sgr0):"
        dir -C -w 1 "$CONFDIR"/tarinstalled | pr -tT --column=3 -w 125
        echo
        rm -rf "$CONFDIR"/cache/* # Remove any files in cache before exiting
        exit 0
        ;;
    search|-s)
        if cat "$CONFDIR"/AppImages-github.lst | cut -f1 -d" " | grep -q "$2"; then
            echo "$(tput bold)Github AppImage(s)$(tput sgr0):"
            cat "$CONFDIR"/AppImages-github.lst | cut -f1 -d" " | grep "$2"
            echo
        fi
        if cat "$CONFDIR"/AppImages-direct.lst | cut -f1 -d" " | grep -q "$2"; then
            echo "$(tput bold)Direct AppImage(s)$(tput sgr0):"
            cat "$CONFDIR"/AppImages-direct.lst | cut -f1 -d" " | grep "$2"
            echo
        fi
        if echo "$TAR_LIST" | grep -q "$2"; then
            echo "$(tput bold)tar package(s)$(tput sgr0):"
            echo "$TAR_LIST" | grep "$2"
            echo
        fi
        rm -rf "$CONFDIR"/cache/* # Remove any files in cache before exiting
        exit 0
        ;;
    man|-m)
        man $RUNNING_DIR/spm.1
        rm -rf "$CONFDIR"/cache/* # Remove any files in cache before exiting
        exit 0
        ;;
    *) # Any unknown arguments go to help func
        helpfunc
        rm -rf "$CONFDIR"/cache/* # Remove any files in cache before exiting
        exit 0
        ;;
esac
